// src/pages/Formulario.jsx
import { useState } from 'react';
import Cookies from 'js-cookie';
import {
  Container,
  Typography,
  FormGroup,
  FormControlLabel,
  Checkbox,
  Paper,
  Box,
  Button,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import Fondo from '../assets/fondo4.jpg';

export default function Formulario() {
  const navigate = useNavigate();
  const usuario = Cookies.get('usuario') || 'Usuario';

  // ClasificaciÃ³n de preguntas por categorÃ­a
  const categoriaPreguntas = {
    ansiedad: [
      "Me siento ansioso(a) antes de un partido importante.",
      "Tengo miedo de no cumplir con las expectativas de mis entrenadores.",
      "A veces me preocupo por hacer el ridÃ­culo frente a mis compaÃ±eros de equipo.",
      "Â¿Siento que la presiÃ³n de ganar me causa ansiedad?",
      "Â¿Te sientes constantemente preocupado por tu rendimiento en los entrenamientos o partidos?",
      "Â¿Te cuesta relajarte despuÃ©s de los entrenamientos o partidos?",
      "Â¿Te cuesta concentrarte durante el juego o las instrucciones del entrenador?",
      "Â¿Tienes pensamientos negativos recurrentes sobre tu desempeÃ±o futbolÃ­stico?"
    ],
    estres: [
      "Siento que el entrenamiento me genera un nivel alto de estrÃ©s.",
      "A veces tengo dificultades para dormir debido a pensamientos sobre el fÃºtbol.",
      "La carga de deberes escolares y el fÃºtbol me genera estrÃ©s.",
      "Â¿Sientes que las exigencias del fÃºtbol te estÃ¡n sobrepasando Ãºltimamente?",
      "Â¿Has notado cambios en tu apetito o sueÃ±o por preocupaciones relacionadas con el fÃºtbol?",
      "Â¿Te sientes mentalmente agotado incluso antes de entrenar o competir?",
      "Â¿Tienes dificultades para desconectarte mentalmente del fÃºtbol cuando estÃ¡s fuera del campo?"
    ],
    depresion: [
      "A veces me siento triste o desanimado(a) por mi rendimiento en el fÃºtbol.",
      "Siento que mis emociones afectan mi rendimiento en el campo.",
      "He tenido pensamientos negativos sobre mÃ­ mismo(a) relacionados con el fÃºtbol.",
      "Â¿Has perdido el interÃ©s o disfrute por jugar al fÃºtbol como antes?",
      "Â¿Te sientes triste o vacÃ­o la mayor parte del tiempo, incluso durante entrenamientos o partidos?",
      "Â¿Tienes poca energÃ­a o te sientes cansado incluso despuÃ©s de descansar?",
      "Â¿Te cuesta motivarte para asistir a entrenamientos o partidos?"
    ],
    falta_motivacion: [
      "Me siento motivado(a) para entrenar y mejorar mis habilidades.",
      "Las metas que me fijo en el fÃºtbol me impulsan a esforzarme mÃ¡s.",
      "Me siento apoyado(a) por mi equipo y entrenadores, lo que me motiva a seguir.",
      "Disfruto del proceso de aprender y mejorar en el fÃºtbol.",
      "Â¿Te cuesta encontrar razones para esforzarte durante los entrenamientos?",
      "Â¿Evitas practicar o mejorar fuera del horario habitual de entrenamiento?",
      "Â¿Sientes que tus metas en el fÃºtbol ya no son tan importantes para ti?",
      "Â¿Has dejado de proponerte nuevos objetivos dentro del equipo?"
    ]
  };

  // Crear array de todas las preguntas para mostrar en el formulario
  const preguntas = [
    ...categoriaPreguntas.ansiedad,
    ...categoriaPreguntas.estres,
    ...categoriaPreguntas.depresion,
    ...categoriaPreguntas.falta_motivacion
  ];

  const [respuestas, setRespuestas] = useState(
    preguntas.reduce((acc, pregunta) => {
      acc[pregunta] = false;
      return acc;
    }, {})
  );

  const handleChange = (pregunta) => {
    setRespuestas((prev) => ({
      ...prev,
      [pregunta]: !prev[pregunta],
    }));
  };

  // FunciÃ³n para analizar las respuestas (equivalente a la lÃ³gica del backend)
  const analizarRespuestas = (respuestasUsuario) => {
    const resultados = {};
    
    for (const [categoria, preguntasCategoria] of Object.entries(categoriaPreguntas)) {
      const total = preguntasCategoria.length;
      const positivos = preguntasCategoria.reduce((count, pregunta) => {
        return count + (respuestasUsuario[pregunta] ? 1 : 0);
      }, 0);
      
      const porcentaje = (positivos / total) * 100;
      resultados[categoria] = Math.round(porcentaje * 100) / 100; // Redondear a 2 decimales
    }
    
    return { porcentajes: resultados };
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    try {
      // Analizar las respuestas localmente
      const resultadosAnalisis = analizarRespuestas(respuestas);
      
      // Guardar resultados en localStorage
      localStorage.setItem('resultados', JSON.stringify(resultadosAnalisis));
      
      // Navegar a la pÃ¡gina de resultados
      navigate('/resultados');
    } catch (error) {
      console.error('Error al procesar respuestas:', error);
      // AquÃ­ podrÃ­as mostrar un mensaje de error al usuario
    }
  };

  return (
    <Box
      sx={{
        position: 'relative',
        width: '100vw',
        height: '100vh',
        bgcolor: 'background.default',
        backgroundImage: `url(${Fondo})`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        overflow: 'hidden',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        p: 2,
      }}
    >
      <Paper
        elevation={3}
        sx={{
          width: '100%',
          maxWidth: 900,
          p: 4,
          maxHeight: '90vh',
          overflowY: 'auto',
          bgcolor: 'rgba(255,255,255,0.8)',
          borderRadius: 3,
        }}
      >
        <Typography variant="h3" gutterBottom align="center">
          Hola {usuario} ðŸ‘‹
        </Typography>

        <Box component="form" onSubmit={handleSubmit}>
          <FormGroup>
            {preguntas.map((pregunta, index) => (
              <Box
                key={pregunta}
                mb={2}
                display="flex"
                justifyContent="space-between"
                alignItems="center"
              >
                <Typography sx={{ flex: 1, pr: 2 }}>
                  {`${index + 1}. ${pregunta} (${respuestas[pregunta] ? 'SÃ­' : 'No'})`}
                </Typography>
                <Checkbox
                  checked={respuestas[pregunta]}
                  onChange={() => handleChange(pregunta)}
                />
              </Box>
            ))}
          </FormGroup>
          <Box
            sx={{
              mt: 3,
              width: '100%',
              display: 'flex',
              justifyContent: 'center',
            }}
          >
            <Button
              type="submit"
              variant="contained"
              color="primary"
              sx={{ width: '200px' }}
            >
              Ver Resultados
            </Button>
          </Box>
        </Box>
      </Paper>
    </Box>
  );
}